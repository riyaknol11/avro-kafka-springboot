/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.knoldus.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CoffeeOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1538338742664082626L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CoffeeOrder\",\"namespace\":\"com.knoldus.model\",\"fields\":[{\"name\":\"id\",\"type\":\"int\",\"doc\":\"Id of the order\"},{\"name\":\"name\",\"type\":\"string\",\"Name\":\"Name of the order\"},{\"name\":\"nickName\",\"type\":\"string\",\"doc\":\"Optional field represents the nickname of the customer\",\"default\":\"\"},{\"name\":\"store\",\"type\":{\"type\":\"record\",\"name\":\"Store\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"address\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"city\",\"type\":\"string\",\"doc\":\"city of the order\"},{\"name\":\"street\",\"type\":\"string\",\"doc\":\"Exact street address of the customer\"},{\"name\":\"zip\",\"type\":\"int\"}]}}]}},{\"name\":\"orderLineItems\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderLineItem\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"size\",\"type\":{\"type\":\"enum\",\"name\":\"Size\",\"symbols\":[\"SMALL\",\"MEDIUM\",\"LARGE\"]}},{\"name\":\"quantity\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CoffeeOrder> ENCODER =
      new BinaryMessageEncoder<CoffeeOrder>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CoffeeOrder> DECODER =
      new BinaryMessageDecoder<CoffeeOrder>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CoffeeOrder> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CoffeeOrder> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CoffeeOrder> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CoffeeOrder>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CoffeeOrder to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CoffeeOrder from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CoffeeOrder instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CoffeeOrder fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Id of the order */
  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence name;
  /** Optional field represents the nickname of the customer */
  @Deprecated public java.lang.CharSequence nickName;
  @Deprecated public com.knoldus.model.Store store;
  @Deprecated public java.util.List<com.knoldus.model.OrderLineItem> orderLineItems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CoffeeOrder() {}

  /**
   * All-args constructor.
   * @param id Id of the order
   * @param name The new value for name
   * @param nickName Optional field represents the nickname of the customer
   * @param store The new value for store
   * @param orderLineItems The new value for orderLineItems
   */
  public CoffeeOrder(java.lang.Integer id, java.lang.CharSequence name, java.lang.CharSequence nickName, com.knoldus.model.Store store, java.util.List<com.knoldus.model.OrderLineItem> orderLineItems) {
    this.id = id;
    this.name = name;
    this.nickName = nickName;
    this.store = store;
    this.orderLineItems = orderLineItems;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return nickName;
    case 3: return store;
    case 4: return orderLineItems;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: nickName = (java.lang.CharSequence)value$; break;
    case 3: store = (com.knoldus.model.Store)value$; break;
    case 4: orderLineItems = (java.util.List<com.knoldus.model.OrderLineItem>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Id of the order
   */
  public int getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Id of the order
   * @param value the value to set.
   */
  public void setId(int value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'nickName' field.
   * @return Optional field represents the nickname of the customer
   */
  public java.lang.CharSequence getNickName() {
    return nickName;
  }


  /**
   * Sets the value of the 'nickName' field.
   * Optional field represents the nickname of the customer
   * @param value the value to set.
   */
  public void setNickName(java.lang.CharSequence value) {
    this.nickName = value;
  }

  /**
   * Gets the value of the 'store' field.
   * @return The value of the 'store' field.
   */
  public com.knoldus.model.Store getStore() {
    return store;
  }


  /**
   * Sets the value of the 'store' field.
   * @param value the value to set.
   */
  public void setStore(com.knoldus.model.Store value) {
    this.store = value;
  }

  /**
   * Gets the value of the 'orderLineItems' field.
   * @return The value of the 'orderLineItems' field.
   */
  public java.util.List<com.knoldus.model.OrderLineItem> getOrderLineItems() {
    return orderLineItems;
  }


  /**
   * Sets the value of the 'orderLineItems' field.
   * @param value the value to set.
   */
  public void setOrderLineItems(java.util.List<com.knoldus.model.OrderLineItem> value) {
    this.orderLineItems = value;
  }

  /**
   * Creates a new CoffeeOrder RecordBuilder.
   * @return A new CoffeeOrder RecordBuilder
   */
  public static com.knoldus.model.CoffeeOrder.Builder newBuilder() {
    return new com.knoldus.model.CoffeeOrder.Builder();
  }

  /**
   * Creates a new CoffeeOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CoffeeOrder RecordBuilder
   */
  public static com.knoldus.model.CoffeeOrder.Builder newBuilder(com.knoldus.model.CoffeeOrder.Builder other) {
    if (other == null) {
      return new com.knoldus.model.CoffeeOrder.Builder();
    } else {
      return new com.knoldus.model.CoffeeOrder.Builder(other);
    }
  }

  /**
   * Creates a new CoffeeOrder RecordBuilder by copying an existing CoffeeOrder instance.
   * @param other The existing instance to copy.
   * @return A new CoffeeOrder RecordBuilder
   */
  public static com.knoldus.model.CoffeeOrder.Builder newBuilder(com.knoldus.model.CoffeeOrder other) {
    if (other == null) {
      return new com.knoldus.model.CoffeeOrder.Builder();
    } else {
      return new com.knoldus.model.CoffeeOrder.Builder(other);
    }
  }

  /**
   * RecordBuilder for CoffeeOrder instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CoffeeOrder>
    implements org.apache.avro.data.RecordBuilder<CoffeeOrder> {

    /** Id of the order */
    private int id;
    private java.lang.CharSequence name;
    /** Optional field represents the nickname of the customer */
    private java.lang.CharSequence nickName;
    private com.knoldus.model.Store store;
    private com.knoldus.model.Store.Builder storeBuilder;
    private java.util.List<com.knoldus.model.OrderLineItem> orderLineItems;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.knoldus.model.CoffeeOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.nickName)) {
        this.nickName = data().deepCopy(fields()[2].schema(), other.nickName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.store)) {
        this.store = data().deepCopy(fields()[3].schema(), other.store);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasStoreBuilder()) {
        this.storeBuilder = com.knoldus.model.Store.newBuilder(other.getStoreBuilder());
      }
      if (isValidValue(fields()[4], other.orderLineItems)) {
        this.orderLineItems = data().deepCopy(fields()[4].schema(), other.orderLineItems);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing CoffeeOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(com.knoldus.model.CoffeeOrder other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nickName)) {
        this.nickName = data().deepCopy(fields()[2].schema(), other.nickName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.store)) {
        this.store = data().deepCopy(fields()[3].schema(), other.store);
        fieldSetFlags()[3] = true;
      }
      this.storeBuilder = null;
      if (isValidValue(fields()[4], other.orderLineItems)) {
        this.orderLineItems = data().deepCopy(fields()[4].schema(), other.orderLineItems);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Id of the order
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Id of the order
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.knoldus.model.CoffeeOrder.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Id of the order
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Id of the order
      * @return This builder.
      */
    public com.knoldus.model.CoffeeOrder.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.knoldus.model.CoffeeOrder.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.knoldus.model.CoffeeOrder.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'nickName' field.
      * Optional field represents the nickname of the customer
      * @return The value.
      */
    public java.lang.CharSequence getNickName() {
      return nickName;
    }


    /**
      * Sets the value of the 'nickName' field.
      * Optional field represents the nickname of the customer
      * @param value The value of 'nickName'.
      * @return This builder.
      */
    public com.knoldus.model.CoffeeOrder.Builder setNickName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.nickName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'nickName' field has been set.
      * Optional field represents the nickname of the customer
      * @return True if the 'nickName' field has been set, false otherwise.
      */
    public boolean hasNickName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'nickName' field.
      * Optional field represents the nickname of the customer
      * @return This builder.
      */
    public com.knoldus.model.CoffeeOrder.Builder clearNickName() {
      nickName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'store' field.
      * @return The value.
      */
    public com.knoldus.model.Store getStore() {
      return store;
    }


    /**
      * Sets the value of the 'store' field.
      * @param value The value of 'store'.
      * @return This builder.
      */
    public com.knoldus.model.CoffeeOrder.Builder setStore(com.knoldus.model.Store value) {
      validate(fields()[3], value);
      this.storeBuilder = null;
      this.store = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'store' field has been set.
      * @return True if the 'store' field has been set, false otherwise.
      */
    public boolean hasStore() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'store' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.knoldus.model.Store.Builder getStoreBuilder() {
      if (storeBuilder == null) {
        if (hasStore()) {
          setStoreBuilder(com.knoldus.model.Store.newBuilder(store));
        } else {
          setStoreBuilder(com.knoldus.model.Store.newBuilder());
        }
      }
      return storeBuilder;
    }

    /**
     * Sets the Builder instance for the 'store' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.knoldus.model.CoffeeOrder.Builder setStoreBuilder(com.knoldus.model.Store.Builder value) {
      clearStore();
      storeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'store' field has an active Builder instance
     * @return True if the 'store' field has an active Builder instance
     */
    public boolean hasStoreBuilder() {
      return storeBuilder != null;
    }

    /**
      * Clears the value of the 'store' field.
      * @return This builder.
      */
    public com.knoldus.model.CoffeeOrder.Builder clearStore() {
      store = null;
      storeBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderLineItems' field.
      * @return The value.
      */
    public java.util.List<com.knoldus.model.OrderLineItem> getOrderLineItems() {
      return orderLineItems;
    }


    /**
      * Sets the value of the 'orderLineItems' field.
      * @param value The value of 'orderLineItems'.
      * @return This builder.
      */
    public com.knoldus.model.CoffeeOrder.Builder setOrderLineItems(java.util.List<com.knoldus.model.OrderLineItem> value) {
      validate(fields()[4], value);
      this.orderLineItems = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'orderLineItems' field has been set.
      * @return True if the 'orderLineItems' field has been set, false otherwise.
      */
    public boolean hasOrderLineItems() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'orderLineItems' field.
      * @return This builder.
      */
    public com.knoldus.model.CoffeeOrder.Builder clearOrderLineItems() {
      orderLineItems = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CoffeeOrder build() {
      try {
        CoffeeOrder record = new CoffeeOrder();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.nickName = fieldSetFlags()[2] ? this.nickName : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (storeBuilder != null) {
          try {
            record.store = this.storeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("store"));
            throw e;
          }
        } else {
          record.store = fieldSetFlags()[3] ? this.store : (com.knoldus.model.Store) defaultValue(fields()[3]);
        }
        record.orderLineItems = fieldSetFlags()[4] ? this.orderLineItems : (java.util.List<com.knoldus.model.OrderLineItem>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CoffeeOrder>
    WRITER$ = (org.apache.avro.io.DatumWriter<CoffeeOrder>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CoffeeOrder>
    READER$ = (org.apache.avro.io.DatumReader<CoffeeOrder>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    out.writeString(this.name);

    out.writeString(this.nickName);

    this.store.customEncode(out);

    long size0 = this.orderLineItems.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.knoldus.model.OrderLineItem e0: this.orderLineItems) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.nickName = in.readString(this.nickName instanceof Utf8 ? (Utf8)this.nickName : null);

      if (this.store == null) {
        this.store = new com.knoldus.model.Store();
      }
      this.store.customDecode(in);

      long size0 = in.readArrayStart();
      java.util.List<com.knoldus.model.OrderLineItem> a0 = this.orderLineItems;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.knoldus.model.OrderLineItem>((int)size0, SCHEMA$.getField("orderLineItems").schema());
        this.orderLineItems = a0;
      } else a0.clear();
      SpecificData.Array<com.knoldus.model.OrderLineItem> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.knoldus.model.OrderLineItem>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.knoldus.model.OrderLineItem e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.knoldus.model.OrderLineItem();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.nickName = in.readString(this.nickName instanceof Utf8 ? (Utf8)this.nickName : null);
          break;

        case 3:
          if (this.store == null) {
            this.store = new com.knoldus.model.Store();
          }
          this.store.customDecode(in);
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<com.knoldus.model.OrderLineItem> a0 = this.orderLineItems;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.knoldus.model.OrderLineItem>((int)size0, SCHEMA$.getField("orderLineItems").schema());
            this.orderLineItems = a0;
          } else a0.clear();
          SpecificData.Array<com.knoldus.model.OrderLineItem> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.knoldus.model.OrderLineItem>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.knoldus.model.OrderLineItem e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.knoldus.model.OrderLineItem();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










